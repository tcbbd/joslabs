Lab3 问题回答
丁卓成 5120379064

Question 1.
    由于硬件上规定了不同的中断号由IDT上的相应表项对应的handler处理，由此来确定是哪个中断到来需要处理，如果使不同的表项都指向同一个入口点，将无法分辨是哪个中断引起了该handler执行，同样也无法获知是否有error code被压入了栈，从而无法具备处理中断的基本能力。因此，对于每一个中断号，都必须设置不同的入口点，即不同的handler function。
    x86架构从硬件上提供这样的机制，是为了提供更好的安全机制，使得不同的中断号，对应于不同类型的中断，每种类型的中断提供特定的服务，其handler互不相同，这些handler可以设置不同级别的权限，甚至可以通过task gate的机制，不同的handler运行于不同的task中，做到code段和segment段均互相分离、互不影响。而对于操作系统来说，底层的硬件机制具有充分的灵活性，完全可以将不同入口点的handler又汇总到同一个函数里进行处理，就像JOS Lab中所做的那样。

Question 2.
    将Trap Gate的DPL设置为0即可保证用户在执行int $14指令的时候产生一个#GP(General Protection)异常，而不是成功调用第14号Interrupt Handler，这样就能通过测试脚本。除了INT3指令用于设置断点（或许再加上INTO指令，对应4号中断），用户态程序应当不能使用其他0-31范围内的中断号执行INT指令，因为内核的中断处理函数不能暴露给用户态程序随意使用，以免由用户态程序导致内核产生错误。若内核允许用户程序调用int $14，由于INT指令不会压入error code，而14号中断为Page Fault恰好具有error code，因此即使在处理缺页的过程中没有出错，最终一定会在返回用户态时出错。另外需要指出的是，尽管DPL设为0导致用户态程序不能通过int $14调用Page Fault的Handler，但若在用户态运行时发生了缺页，不管DPL为多少，都会忽略它而直接进入Handler，因此并不会使用户态丧失处理缺页的能力。

Question 3.
    为了能从用户态调用INT3指令，需要将其在IDT中对应的Trap Gate的DPL设置为3，否则将导致General Protection Fault。实现单步运行时，单步执行完一条指令后，会引起1号中断Debug Exception，它对应的Trap Gate的DPL不需要设置为3，应该仍设置为0，此时单步调试仍能正常引起其handler被调用，且能防止用户通过int $1的方式主动调用该handler。

Question 4.
    Intel提供这些机制的目的是提供权限管理，前几问主要涉及的Privilege Level和Gate的机制，使内核态的例程受到了一定的保护，在保留暴露给外部使用的功能的同时，避免了被恶意的用户态程序随意滥用以致破坏内核的状态，造成系统崩溃。其他的如页式内存管理等机制也提供了权限机制，综合起来就给予了用户态程序充分的限制，使内核得到了足够的保护，不易发生崩溃。
